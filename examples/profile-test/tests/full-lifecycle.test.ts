import axios from 'axios'
import {TestCase} from '@core/decorators'
import {Setup, Context} from '@core/lifecycle'
import {BeforeAll, AfterAll} from '@core/class-hooks'
import {step, attach} from '@core/dsl'
import {runTestClass} from '@core/runner/runner'

class ParametrizedSetupTest {
    @Context()
    ctx!: { email?: string; status?: number; token?: string; log?: string[] }

    @BeforeAll()
    async initSuite() {
        this.ctx = this.ctx || {}
        this.ctx.log = ['üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–∞']
    }

    @AfterAll()
    async finishSuite() {
        this.ctx.log?.push('üèÅ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–∞')
        attach('–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤', this.ctx.log?.join('\n') ?? '', 'text/plain')
    }

    @Setup()
    async createUser([email, expectedStatus]: [string, number]) {
        this.ctx.email = email
        this.ctx.status = expectedStatus
        this.ctx.token = email + '-token'
        this.ctx.log?.push(`üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${email}`)
    }

    @TestCase.each([
        ['admin@example.com', 200],
        ['guest@example.com', 403],
    ])('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è %s')
    async checkAccess(email: string, password: string, expectedStatus: number) {
        await step('–ü—Ä–æ–≤–µ—Ä–∫–∞ email –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ', () => {
            expect(this.ctx.email).toMatch(/@example\.com/)
        })

        await step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞', () => {
            expect(this.ctx.token).toBe(this.ctx.email + '-token')
        })

        await step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞', async () => {
            const url = `https://httpbin.org/status/${this.ctx.status}`
            try {
                const res = await axios.get(url)
                expect(res.status).toBe(this.ctx.status)
            } catch (e: any) {
                expect(e.response?.status).toBe(this.ctx.status)
            }
        })

        this.ctx.log?.push(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: ${this.ctx.email}`)
    }
}

runTestClass(ParametrizedSetupTest)
